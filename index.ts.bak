// 0x20 - 0x7f
const FULL_ALPHA_CHARS = "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e".split('')

// reserved filename chars on windows
// 0x00-0x1F 0x7F " (0x22) * (0x2a) / (0x2f) : (0x3a) < (0x3c) > (0x3e) ? (0x3f) \ (0x5c) | (0x7c)
const FILENAME_CHARS = "\x20\x21\x23\x24\x25\x26\x27\x28\x29\x2b\x2c\x2d\x2e\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3b\x3d\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7d\x7e".split('')

function hex(a: number) {
    return '0x' + a.toString(16)
}

function and(a: number, b: number) {
    return a & b
}

function sub(a: number, b: number) {
    const arr = new Uint32Array(1)
    arr[0] = a - b
    return arr[0]    
}

function isInAllowedChars(value: number, allowedChars: string[]): boolean {
    const hex = value.toString(16).padStart(8, '0')
    // console.log(`hex = ${hex}`)
    for (let h in hex.match(/.{1,2}/g)) {
        console.log(`checking ${h} ${String.fromCharCode(parseInt(h, 16))} in allowed chars`)
        if (allowedChars.indexOf(String.fromCharCode(parseInt(h, 16))) < 0) {
            // console.log('false')
            return false
        }
    }

    // console.log('true')
    return true
}

function getZeroAndEax(allowedChars: string[]): [number, number] {
    for (let i = 0; i <= 0xffffffff; i++) {
        // console.log(`i = ${i}`)
        if (isInAllowedChars(i, allowedChars)) {
            for (let j = 0; j <= 0xffffffff; j++) {
                // console.log(`j = ${j}`)
                if (isInAllowedChars(j, allowedChars)) {
                    if (and(i, j) === 0) {
                        return [i, j]
                    }
                }
            }
        }
    }

    throw new Error('Impossible to get zero in eax with allowed chars')
}

function getZeroAndEax2(allowedChars: string[]): [number, number] {
    for (let i = 0, j = 0xffffffff; i <= 0xffffffff; i++, j--) {
        console.log(`i = ${i}, j = ${j}`)
        if (isInAllowedChars(i, allowedChars) && isInAllowedChars(j, allowedChars)) {
            if (and(i, j) === 0) {
                return [i, j]
            }
        }
    }

    throw new Error('Impossible to get zero in eax with allowed chars')
}

function subEncode(value: number, allowedChars: string[]): [number, number] {
    for (let i = 0; i <= 0xffffffff; i++) {
        // console.log(`i = ${i}`)
        if (isInAllowedChars(i, allowedChars)) {
            for (let j = 0; j <= 0xffffffff; j++) {
                // console.log(`j = ${j}`)
                if (isInAllowedChars(j, allowedChars)) {
                    if (sub(i, j) === value) {
                        return [i, j]
                    }
                }
            }
        }
    }

    throw new Error('Impossible to subEncode with allowed chars')
}

function subEncode3(value: number, allowedChars: string[]): [number, number, number] {
    for (let i = 0; i <= 0xffffffff; i++) {
        // console.log(`i = ${i}`)
        if (isInAllowedChars(i, allowedChars)) {
            for (let j = 0; j <= 0xffffffff; j++) {
                // console.log(`j = ${j}`)
                if (isInAllowedChars(j, allowedChars)) {
                    for (let k = 0; k <= 0xffffffff; k++) {
                        // console.log(`j = ${j}`)
                        if (isInAllowedChars(k, allowedChars)) {
                            if (sub(sub(i, j), k) === value) {
                                return [i, j, k]
                            }
                        }
                    }
                }
            }
        }
    }

    throw new Error('Impossible to subEncode3 with allowed chars')
}

const [a, b] = getZeroAndEax2(FILENAME_CHARS)
console.log(`getZeroInEax: AND EAX, 0x${hex(a).padStart(8, '0')}`)
console.log(`getZeroInEax: AND EAX, 0x${hex(b).padStart(8, '0')}`)

const [c, d] = subEncode(0x5f555555, FILENAME_CHARS)
console.log(`subEncode: SUB EAX, 0x${hex(c).padStart(8, '0')}`)
console.log(`subEncode: SUB EAX, 0x${hex(d).padStart(8, '0')}`)

let res = sub(0x0, 0x5f555555)
res = sub(res, 0x5f555555)
res = sub(res, 0x5e565556)
console.log(hex(res))
